2020180021 송승호 yudle537@gmail.com 010-8518-5624

정내훈 : 010-8964-9524
-----------------------------------------------------------------

졸작을 유예하고 1년 더 공부하고 싶다.
- 게임서버프로그래밍 청강,  멀티코어 프로그래밍 수강


서버프로그래머가 되고 싶다.


학부 연구생은 가능한가?  학교에 1년 더 다니려 한다.

졸작은?
 지금 이대현 교수님 지도로 언리얼 서버를 맞고 있는데, 폭파될 예정.
 내년 2학기에 다시 시작 예정,  논문 보다는 게임 제작 선호. 


다른 교수님들 : 이대현, 김경철, 이용희

학부 연구생의 의무와 혜택
 - 원하는 것 : 서버 프로그래밍, 멀티 쓰레드 알고리즘 최적화, 함수형 언어, 리눅스에서 서버 개발

- 의무 : 과제 수행, 조교 업무

- 혜택 : 과제 비 수령,  조교 장학금 수령, 일주일에 한번 개인 지도
           연구실 제공 (책상, 의자, PC)   => 혹시 학과에 빈 방이 있을까?????  없으면 E314호


겨울방학 동한 할 수 있는 일
 - MMO 온라인 게임을 하나 만들어 보기 (SFML을 사용한 2D 게임)
 - 다른 언어 공부해 보기 : RUST,  Elixir, Haskell
 - 멀티 쓰레드 프로그래밍 도전
  * Skip-List에 EBR 추가
  * Lock Free 만능 객체 최적화 (지금보다 100배 이상 성능 향상)
  * Lock Free elimination stack 최적화 (논문을 보고 논문에 있는 최적화 기법을 실제로 적용)
  * lock free shared pointer 개선 : 선배가 작성한 논문이 있는데, 성능의 약점이 있고 이를 보완.

- 

- 다음 미팅 : 1월 6일 월요일 오후 4시 30분
  * GITHUB에 프로젝트를 하나 만들고 거기에 EBR SKIPLIST 구현  시작, 나를 초대. (zzapuno@hotmail.com)

2025-01-06
-------------
1. EBR SKIPLIST를 구현해 보았다.
 -  Reuse는 호출하는데 GetNode는 호출하지 않음.
 - 오류!!!! => Add할 때 new_node를 미리 만들어두는 코드에서 오류 발생
  => 오류를 알았으니 다시 구현!!!
  => 고민해 보고 잘 안되면 https://www.cl.cam.ac.uk/techreports/UCAM-CL-TR-579.pdf  참조
2. 다음 미팅
 - 1월 20일 오후 4시 30분

2025-01-20
-------------
1. 첫번째 시도
 - 바닥이 마킹되어 있으면 재사용하자
 - 문제 : 바닥이 마킹되었다고 해서 가리키는 노드가 하나도 없다는 조건은 만족하지 않는다.
  왜? Find 에서 제거를 하는데 최상층이 제거된다는 보장이 없다.

2. 두번째 시도
 - 별도의 배열을 하나 두고 Find에서 제거할 때 마다 제거한 층을 표시하게 한다. 다 제거가 되는 순간 재사용하자.
 - 문제 : 추가둥에 제거가 호출되었을 경우 제거된 링크를 추가가 되살리는 문제가 발생한다.
 - 해결 : 포인터에 마킹말고 제거되었음도 같이 표시하자.
 - 문제 : 추가가 덮어쓰는 것을 막을 수 없다.
 
3. 해결방법
 - 문제는 새 노드를 추가할 때 다른 쓰레드에서 그 노드를 같이 제거하는 것이다. 제거의 속도가 추가의 속도보다 빨라서 먼저 제거된 포인터를
  추가 동작에서 덮어써서 마킹을 지워버리는 것이 문제이다.
 - 해결방법 : 
    추가할 때 마킹을 그대로 보존하면서 추가 한다.
    add_node.next[i] = curr[i]  X
    
    while (true) {
       removed = add_node.next[i].getremoved();
       if (true == add_node.next[i].CAS(nullptr, currs[i].get_ptr(), removed, removed)) {
          while (true) {
                if (false == prev.next[i].CAS(currs[i].next[i], add_node, false, false)) {
                       Find(x, prevs, currs);
                       continue; 
                } else break;
          }
       break;
       }
       Find(x, prevs, currs); 
    }

  4. 다음미팅
   - 2025-02-10 월요일 4시 30분

2025-02-10
-------------
1. 진행상황
 - Set_ptr_only라는 함수를 만들어서 marking을 보존하게 수정 했다 => 그래도 에러

2. 지적사항
 - 루프에 들어가기 전에도 Set_ptr_only로 설정해야 한다.
 - Find() 에서 All_removed를 호출해서 EBR에 넘길지 말지 결정하는데, 두개 쓰레드에서 동시에 넘길수 있다. 그러면 두번 delete가 되는 오류가 발생한다.
  * FLag를 하나 추가해서 EBR에 넘어갔나 안넘어 갔나를 판단한다. 
  * 기존  All_removed : 포인터의 비트를 하나 더 사용해서 링크의 리무브 여부를 표시한다.

3. 다음 미션
  - Elixir 공부하기
  -   https://product.kyobobook.co.kr/detail/S000001810492 책  4장 까지

4. 다음 미팅
 - 3월 4일 화요일 오후 7시

2025-03-04
-------------
1. Elixir 공부하기  12장까지
2. 숙제하기
다음 프로그램들을 엘릭서로 작성해서 제출
숫자 하나를 입력 받아서 1부터 그 숫자까지의 소수의 개수를 출력하는 프로그램
숫자 n을 입력 받아서 n번째 소수를 출력하는 프로그램 
숫자 하나를 입력 받아서. 피보나치 수열 중에 그 숫자와 가장 가까운 숫자를 출력하는 프로그램
숫자 n을 입력 받아서 n개의 약수를 갖는 가장 작은 수를 출력하는 프로그램
(추가 필요) 소인수 분해를 하라.
숫자 n을 입력 받아서 n!의 모든 자리수를 더해서 출력하는 프로그램.
숫자 n을 입력 받아서 a+b+c=n이 되는 피타고라스 수를 모두 출력하는 프로그램
숫자 n을 입력 받아서 그 숫자를 2진수로 나타냈을 때 1의 개수를 출력하는 프로그램
텍스트 파일의 이름을 입력 받아서 가장 많이 사용된 단어 10개를 사용 빈도와 함께 출력

3. 왜 무한루프에 빠지는가?
defmodule Quicksort do
  def sort([]), do: []
  def sort([pivot|t]) do
    sort(for x <- t, x < pivot, do: x)
    ++ [pivot] ++
    sort(for x <- t, x >= pivot, do: x)
  end
end


4. 다음 미팅	
 3월 18일 화요일 오후 7시

2025-03-18
-------------
1. Elixir 멀티쓰레드 프로그래밍 과제
 - 큰 수자를 입력받아 소인수 분해를 하는 프로그램 작성
 - 숫자를 그낭 int로 받으면 float으로 변환되면서 정밀도가 손상되므로 문자열로 받아서 처리 => 문자열의 사칙연산을 따로 정의해서 사용
 - 프로세스로 작업을 쪼개서 한다.
    1. 자연수의 리스트를 만든다. (1부터 squre_root(그 숫자))
    2. 1번 프로세스는 리스트의 맨 앞의 수를 꺼내서 그 수의 배수를 리스트에서 지운다.
             그 숫자가 맨 앞의 수의 배수인경우  자연수의 리스트의 크기를 (1부터 square_root(그 숫자 / 맨 앞의 숫자))로 줄인다. 그리고 맨 앞의 수를 소인수 리스트에 추가한다.
             그 숫자가 맨 앞의 수의 배수인경우  자연수의 리스트의 크기를 (1부터 square_root(그 숫자 / 맨 앞의 숫자))로 줄인다. 그리고 맨 앞의 수를 소인수 리스트에 추가한다.
             그 숫자가 맨 앞의 수의 배수인경우  자연수의 리스트의 크기를 (1부터 square_root(그 숫자 / 맨 앞의 숫자))로 줄인다. 그리고 맨 앞의 수를 소인수 리스트에 추가한다.
             .... 더이상 나누어 떨이지지 않을 때 까지 반복
    3. 2번 프로세스는 리스트의 맨 앞의 수를 꺼내서 그 수의 배수를 리스트에서 지운다.
    4. ..... 
 - 싱글 쓰레드로 돌렸을 때와 멀티쓰레드로 돌렸을 때 속도 비교...

2. ELixir로 게임서버 만들어 보는 것은 게임서버프로그래밍 과목 진도가 더 나가면.

3. 다음 미팅
  - 4월 1일 화요일 오후 7시

2025-04-01
-------------
1.  위의 프로그램을 구현했는데 멀티쓰레드 구현에서 병렬성이 거의 없어서 process의 효율성을 측정하기 힘들다.
 따라서 아래의 프로그램을 쓰레드개수 제한없이 돌가도록 Elixr로 변환해서 구현해 볼것.

#include <thread>
#include <iostream>
#include <concurrent_unordered_set.h>
#include <concurrent_vector.h>
#include <cmath>
#include <vector>
#include <chrono>

concurrency::concurrent_unordered_set <int> erased_list;
concurrency::concurrent_unordered_set <int> done_threads;
concurrency::concurrent_vector <int> factors;
long long g_n;


void worker(int th_id, int p)
{
	if (p * p > g_n) {
		done_threads.insert(th_id);
		return;
	}

	while ((g_n % p) == 0) {
		factors.push_back(p);
		g_n = g_n / p;
	}

	long long sqrt_n = sqrt(g_n);
	int duration = 1000;
	int count = 0;
	for (int i = p * p; i < sqrt_n; i = i + p) {
		erased_list.insert(i);
		if ((count++ % duration) == 0) {
			sqrt_n = sqrt(g_n);
			if (0 != erased_list.count(p))
				break;
		}
	}
	done_threads.insert(th_id);
}

int main()
{
	using namespace std::chrono;
	std::cout << "Enter a number : ";
	std::cin >> g_n;

	auto start_t = system_clock::now();
	long long sqrt_n = sqrt(g_n);

	std::vector <std::thread> workers;
	int index = 0;
	worker(0, 2);
	for (int p = 3; p < sqrt_n; p = p + 2) {
		if (erased_list.count(p) != 0)
			continue;
		workers.emplace_back(worker, index, p);
		index++;

		while (index - done_threads.size() >= std::thread::hardware_concurrency()) {
			//std::this_thread::sleep_for(1ms);
			std::this_thread::yield(2);
			sqrt_n = sqrt(g_n);
		}

	}

	for (auto& th : workers)
		th.join();
	auto end_t = system_clock::now();
	auto exec_t = end_t - start_t;
	auto ms = duration_cast<milliseconds>(exec_t).count();

	std::cout << "Exec Time : " << ms << "ms.  Result = ";
	for (auto n : factors)
		std::cout << n << ", ";

	std::cout << g_n << std::endl;


}

2. 다음에는 Lock Free Elimination Stack 
3. 다음미팅 4월 15일 화요일 오후 7시

2025-04-15
-------------
1.  위의 프로그램을 엘릭서에서 돌렸을 떄 process들의 속도차이로 인해서 factors 리스트에 소수가 아닌 수가 들어가는 경우가 있다. 그래서 소인수분해가 덜되는 경우가 생긴다.
  => 수정된 알고리즘을 사용하면 된다.
2. Lock Free Elimination Stack
 => 논문을 구현해 보자  (https://people.csail.mit.edu/shanir/publications/Lock_Free.pdf)
 => 수업시간에 구현한 Lock Free Back Off 스택과 성능을 비교해보자.
3. 다음 미팅 4월 29일 화요일 오후 7시

2025-04-29
--------------
1. Lock Free Elimination Stack
  - 성능이 별로다.
  - 성능에 영향을 끼치는 것이, range를 조절하는 기법하고, delay를 조절하는 기법인데 이걸 그냥 아무렇게나 구현하니까 성능이 낮게 나올수 밖에 없음.
    논문에 적혀있는 논문을 보고 구현을 할 것.

2. 다음 미팅
 - 5월 13일 화요일 오후 7시 

2025-05-13
-------------
1. 진행상황
 - 최적화를 했는데 오류 발생
 - 최적화 IDEA
  * 소거배열을 선택할때 중앙에서 정규분포 랜덤으로 선택
  * Range와 Delay를 thread_local로 선언해서 메모리 충돌을 회피

  auto v = std::vector<int>(3);

2. 비교
 - https://cs.vu.nl/~wanf/theses/woudenberg-bscthesis.pdf

3. 진행방향선회
 - 무조건 빠른 것을 찾는 것이 아니라. 기존의 Lock Free Stack보다 빠르기만 하면 된다.
 - 비교 대상 (단순무식 Lock-Free, 단순 무식 Lock-Free Back Off)  위의 논문의 소스코드를 사용해 보자.

4. 다음 미팅
 - 5월 27일 오후 7시

5. 36 CORE Machine

  ssh 210.93.61.41 -p 24 -l seungho


2025-05-27
-------------
1. 다음 미션 만능객체 최적화
 - 만능 알고리즘이 사용되는 분야 : NUMA 알고리즘
 - NUMA 알고리즘은 다른 CPU의 메모리를 Access하면 속도가 많이 느리다.
 - 이를 극복하기 위해서 Original 자료구조가 있으면 각각의 CPU가 자기 메모리에 복사본을 만들어 놓고 그 복사본을 Access해서 다른 CPU 메모리 접근을 줄이는 방식으로 최적화한다,
 - 복사본의 Lock Free 동기화가 너무 어렵기 때문에 만능객체에 LOG 개념을 차용해서 사용한다.

 - 최적화 아이디어
  * 교재의 만능 객체는 log만 저장하는데 굳이 처음부터 다 저장할 필요가 있는가?
    앞의 1000개를 1000가 적용된 자료구조로 바꾼다. => Apply 호출 회수가 확 줄어든다.
    자료구조로 전환할 떄 모든 쓰레드의 MIN을 실제 자료구조로 바꾸면 Apply  호출 회수를 최소화 할 수 있다.
 * Contains 호출은 LOG에 넣을 필요가 없다.

 - 아래를 한번 구현해 보자.  
“A Wait Free Universal Construct for Large Objects”, PPoPP '20: Proceedings of the 25th ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming February 2020 

2. 다음 미팅
 - 6월 17일 화요일 오후 7시.

3. 졸업작품 서버 프로그래밍 중점연구과제 예시
 - RIO 또는 io_uring을 사용한 최적화
 - 다른 언어로 구현. Haskel, Elixir, Golang, RUST
 - Game World Seamless Zone Partitioning
 - 서버에서 사용하는 자료구조의 Lock-Free 최적화 (예 : view_list)
 - 고성능 길막기 구현.
 - 서버에 물리엔진 결합 (PhysX 같은 물리엔진을 사용한 충돌처리,  길막기, 지형 폭파..... )
 - 동접 5000



